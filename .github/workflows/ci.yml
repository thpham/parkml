name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # ===================================
  # Quality Checks
  # ===================================
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Install Node.js dependencies
        run: npm ci

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-

      - name: Run pre-commit hooks
        run: pre-commit run --all-files --verbose

      - name: Run security audit
        run: npm run security:check
        continue-on-error: true

      - name: Upload pre-commit results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: pre-commit-results
          path: |
            .pre-commit-log.txt
            pre-commit-errors.log
          retention-days: 7

  # ===================================
  # TypeScript Compilation
  # ===================================
  typecheck:
    name: TypeScript Compilation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      matrix:
        workspace: [backend, frontend, shared]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client (backend only)
        if: matrix.workspace == 'backend'
        run: npm run db:generate --workspace=apps/backend

      - name: TypeScript check - ${{ matrix.workspace }}
        run: npm run typecheck:${{ matrix.workspace }}

  # ===================================
  # Linting
  # ===================================
  lint:
    name: ESLint Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      matrix:
        workspace: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: ESLint - ${{ matrix.workspace }}
        run: npm run lint:${{ matrix.workspace }}

  # ===================================
  # Testing
  # ===================================
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        workspace: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database (backend only)
        if: matrix.workspace == 'backend'
        run: |
          npm run db:generate --workspace=apps/backend
          npm run db:push --workspace=apps/backend
        env:
          DATABASE_URL: file:./test.db

      - name: Run tests - ${{ matrix.workspace }}
        run: npm run test:${{ matrix.workspace }}
        env:
          DATABASE_URL: file:./test.db
          JWT_SECRET: test-secret-key-for-ci
          NODE_ENV: test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-results-${{ matrix.workspace }}
          path: |
            apps/${{ matrix.workspace }}/coverage/
            apps/${{ matrix.workspace }}/test-results/
          retention-days: 7

  # ===================================
  # Build
  # ===================================
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality, typecheck, lint]

    strategy:
      matrix:
        workspace: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client (backend only)
        if: matrix.workspace == 'backend'
        run: npm run db:generate --workspace=apps/backend

      - name: Build - ${{ matrix.workspace }}
        run: npm run build:${{ matrix.workspace }}
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.workspace }}
          path: apps/${{ matrix.workspace }}/dist/
          retention-days: 30

  # ===================================
  # Security Scanning
  # ===================================
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  # ===================================
  # Docker Build (Optional)
  # ===================================
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t parkml:latest .
          docker image ls

      - name: Test Docker image
        run: |
          docker run --rm -d --name parkml-test -p 3000:3000 parkml:latest
          sleep 10
          curl -f http://localhost:3000/health || exit 1
          docker stop parkml-test

  # ===================================
  # Integration Status
  # ===================================
  integration:
    name: Integration Status
    runs-on: ubuntu-latest
    needs: [quality, typecheck, lint, test, build, security]
    if: always()

    steps:
      - name: Check all job statuses
        run: |
          echo "Quality: ${{ needs.quality.result }}"
          echo "TypeCheck: ${{ needs.typecheck.result }}"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Security: ${{ needs.security.result }}"

          if [[ "${{ needs.quality.result }}" != "success" ||
                "${{ needs.typecheck.result }}" != "success" ||
                "${{ needs.lint.result }}" != "success" ||
                "${{ needs.test.result }}" != "success" ||
                "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ One or more critical jobs failed"
            exit 1
          else
            echo "✅ All critical jobs passed"
          fi

      - name: Post status to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            const success = '${{ needs.quality.result }}' === 'success' &&
                          '${{ needs.typecheck.result }}' === 'success' &&
                          '${{ needs.lint.result }}' === 'success' &&
                          '${{ needs.test.result }}' === 'success' &&
                          '${{ needs.build.result }}' === 'success';

            const body = success
              ? '✅ All quality checks passed! Ready for review.'
              : '❌ Some quality checks failed. Please review the CI results.';

            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body
            });
