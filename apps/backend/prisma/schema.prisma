// ParkML Enhanced Prisma Schema
// Parkinson's Disease Monitoring Platform Database Schema with Advanced User Management

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Organizations/Clinics table - Multi-clinic support
model Organization {
  id          String   @id @default(cuid())
  name        String
  description String?
  address     String?
  phone       String?
  email       String?
  settings    String   @default("{}") // JSON stored as string for org-specific settings
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relationships
  users                   User[]
  patients                Patient[]
  auditLogs               AuditLog[]
  emergencyAccess         EmergencyAccess[]
  encryptionKeys          EncryptionKey[]
  homomorphicComputations HomomorphicComputation[]
  proxyReEncryptionKeys   ProxyReEncryptionKey[]

  @@map("organizations")
}

// Enhanced Users table - Authentication and user management
model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  passwordHash       String    @map("password_hash")
  name               String?
  role               Role
  organizationId     String?   @map("organization_id")
  isActive           Boolean   @default(true) @map("is_active")
  lastLoginAt        DateTime? @map("last_login_at")
  encryptionMetadata String?   @map("encryption_metadata") // JSON - Encryption metadata for migration tracking

  // Enhanced Profile Fields
  phone                        String?   @map("phone")
  dateOfBirth                  DateTime? @map("date_of_birth")
  addressStreet                String?   @map("address_street")
  addressCity                  String?   @map("address_city")
  addressPostalCode            String?   @map("address_postal_code")
  addressCountry               String?   @map("address_country")
  emergencyContactName         String?   @map("emergency_contact_name")
  emergencyContactPhone        String?   @map("emergency_contact_phone")
  emergencyContactRelationship String?   @map("emergency_contact_relationship")
  medicalAllergies             String?   @map("medical_allergies")
  medicalMedications           String?   @map("medical_medications")
  medicalEmergencyNotes        String?   @map("medical_emergency_notes")
  preferences                  String    @default("{}") @map("preferences") // JSON stored as string
  notificationSettings         String    @default("{}") @map("notification_settings") // JSON stored as string

  // Security Fields
  twoFactorSecret      String?   @map("two_factor_secret")
  twoFactorEnabled     Boolean   @default(false) @map("two_factor_enabled")
  twoFactorBackupCodes String?   @map("two_factor_backup_codes") // JSON array of backup codes
  passwordChangedAt    DateTime? @map("password_changed_at")
  securityScore        Int       @default(65) @map("security_score")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  organization         Organization?          @relation(fields: [organizationId], references: [id])
  patient              Patient?
  caregiverAssignments CaregiverAssignment[]  @relation("CaregiverAssignments")
  encryptionKeys       EncryptionKey[]
  emergencyAccess      EmergencyAccess[]
  emergencyApprovals   EmergencyApproval[]
  delegations          ProxyReEncryptionKey[] @relation("UserDelegations")
  receivedDelegations  ProxyReEncryptionKey[] @relation("UserDelegated")
  createdAssignments   CaregiverAssignment[]  @relation("AssignmentCreator")
  sentInvitations      Invitation[]           @relation("InvitationSender")
  receivedInvitations  Invitation[]           @relation("InvitationReceiver")
  symptomEntries       SymptomEntry[]
  auditLogs            AuditLog[]

  // New Security Relationships
  twoFactorAuth            TwoFactorAuth?
  passkeys                 Passkey[]
  securityAuditLogs        SecurityAuditLog[]
  userSessions             UserSession[]
  passwordHistory          PasswordHistory[]
  userPreferences          UserPreferences?
  userNotificationSettings NotificationSettings?

  // Legacy relationships - will be deprecated after migration
  caregiverPatients          PatientCaregiver[]
  healthcareProviderPatients PatientHealthcareProvider[]

  @@map("users")
}

// Enhanced Patients table - Patient information
model Patient {
  id                 String   @id @default(cuid())
  userId             String   @unique @map("user_id")
  organizationId     String   @map("organization_id")
  name               String
  email              String? // Patient email for direct communication
  dateOfBirth        DateTime @map("date_of_birth")
  diagnosisDate      DateTime @map("diagnosis_date")
  emergencyContact   String?  @default("{}") @map("emergency_contact") // JSON stored as string
  emergencyPhone     String?  @map("emergency_phone") // Emergency contact phone
  privacySettings    String   @default("{}") @map("privacy_settings") // JSON stored as string
  encryptionMetadata String?  @map("encryption_metadata") // JSON - Encryption metadata for migration tracking
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // Relationships
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization         Organization          @relation(fields: [organizationId], references: [id])
  caregiverAssignments CaregiverAssignment[]
  symptomEntries       SymptomEntry[]
  weeklySummaries      WeeklySummary[]
  emergencyAccess      EmergencyAccess[]

  // Legacy relationships - will be deprecated after migration
  caregivers          PatientCaregiver[]
  healthcareProviders PatientHealthcareProvider[]

  @@map("patients")
}

// Enhanced Caregiver Assignment table - Replaces junction tables
model CaregiverAssignment {
  id            String           @id @default(cuid())
  patientId     String           @map("patient_id")
  caregiverId   String           @map("caregiver_id")
  caregiverType CaregiverType    @map("caregiver_type")
  assignedBy    String?          @map("assigned_by") // User ID who made the assignment
  status        AssignmentStatus @default(pending)
  permissions   String           @default("{}") @map("permissions") // JSON stored as string
  startDate     DateTime?        @map("start_date")
  endDate       DateTime?        @map("end_date")
  notes         String?
  consentGiven  Boolean          @default(false) @map("consent_given")
  consentDate   DateTime?        @map("consent_date")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")

  // Relationships
  patient        Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  caregiver      User    @relation("CaregiverAssignments", fields: [caregiverId], references: [id], onDelete: Cascade)
  assignedByUser User?   @relation("AssignmentCreator", fields: [assignedBy], references: [id], onDelete: SetNull)

  @@map("caregiver_assignments")
}

// Invitation system for user management
model Invitation {
  id            String           @id @default(cuid())
  email         String
  role          Role
  invitedBy     String           @map("invited_by")
  invitedUser   String?          @map("invited_user") // Set when user accepts invitation
  patientId     String?          @map("patient_id") // For caregiver invitations
  caregiverType CaregiverType?   @map("caregiver_type")
  status        InvitationStatus @default(pending)
  token         String           @unique // For secure invitation links
  expiresAt     DateTime         @map("expires_at")
  acceptedAt    DateTime?        @map("accepted_at")
  message       String? // Optional personal message
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")

  // Relationships
  sender   User  @relation("InvitationSender", fields: [invitedBy], references: [id])
  receiver User? @relation("InvitationReceiver", fields: [invitedUser], references: [id])

  @@map("invitations")
}

// Emergency access system
model EmergencyAccess {
  id               String              @id @default(cuid())
  userId           String              @map("user_id")
  patientId        String              @map("patient_id")
  reason           String // Emergency reason/justification
  accessType       EmergencyAccessType @map("access_type")
  startTime        DateTime            @map("start_time")
  endTime          DateTime?           @map("end_time")
  isActive         Boolean             @default(true) @map("is_active")
  approvedBy       String?             @map("approved_by") // For future approval workflow
  justification    String? // Detailed justification for emergency access
  urgencyLevel     String?             @map("urgency_level") // critical, high, medium
  organizationId   String?             @map("organization_id")
  revokedAt        DateTime?           @map("revoked_at")
  revokedBy        String?             @map("revoked_by")
  revocationReason String?             @map("revocation_reason")
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @updatedAt @map("updated_at")

  // Relationships
  user         User                @relation(fields: [userId], references: [id])
  patient      Patient             @relation(fields: [patientId], references: [id])
  organization Organization?       @relation(fields: [organizationId], references: [id])
  approvals    EmergencyApproval[]

  @@map("emergency_access")
}

// Emergency access approval system
model EmergencyApproval {
  id                String   @id @default(cuid())
  emergencyAccessId String   @map("emergency_access_id")
  approverId        String   @map("approver_id")
  approverRole      String   @map("approver_role")
  approvalReason    String   @map("approval_reason")
  digitalSignature  String   @map("digital_signature")
  createdAt         DateTime @default(now()) @map("created_at")

  // Relationships
  emergencyAccess EmergencyAccess @relation(fields: [emergencyAccessId], references: [id])
  approver        User            @relation(fields: [approverId], references: [id])

  @@unique([emergencyAccessId, approverId])
  @@map("emergency_approvals")
}

// Audit logging system
model AuditLog {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  organizationId String   @map("organization_id")
  action         String // Action performed (CREATE, UPDATE, DELETE, ACCESS)
  resource       String // Resource affected (user, patient, symptom_entry, etc.)
  resourceId     String   @map("resource_id")
  details        String   @default("{}") // JSON stored as string with action details
  ipAddress      String?  @map("ip_address")
  userAgent      String?  @map("user_agent")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relationships
  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@map("audit_logs")
}

// Legacy junction table for Patient-Caregiver relationships (will be deprecated)
model PatientCaregiver {
  patientId   String   @map("patient_id")
  caregiverId String   @map("caregiver_id")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relationships
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  caregiver User    @relation(fields: [caregiverId], references: [id], onDelete: Cascade)

  @@id([patientId, caregiverId])
  @@map("patient_caregivers")
}

// Legacy junction table for Patient-Healthcare Provider relationships (will be deprecated)
model PatientHealthcareProvider {
  patientId            String   @map("patient_id")
  healthcareProviderId String   @map("healthcare_provider_id")
  createdAt            DateTime @default(now()) @map("created_at")

  // Relationships
  patient            Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  healthcareProvider User    @relation(fields: [healthcareProviderId], references: [id], onDelete: Cascade)

  @@id([patientId, healthcareProviderId])
  @@map("patient_healthcare_providers")
}

// Symptom entries table - Enhanced with audit support
model SymptomEntry {
  id                   String   @id @default(cuid())
  patientId            String   @map("patient_id")
  entryDate            DateTime @map("entry_date")
  completedBy          String   @map("completed_by")
  motorSymptoms        String?  @map("motor_symptoms") // JSON stored as string
  nonMotorSymptoms     String?  @map("non_motor_symptoms") // JSON stored as string
  autonomicSymptoms    String?  @map("autonomic_symptoms") // JSON stored as string
  dailyActivities      String?  @map("daily_activities") // JSON stored as string
  medicationData       String?  @map("medication_data") // JSON stored as string
  environmentalFactors String?  @map("environmental_factors") // JSON stored as string
  safetyIncidents      String?  @map("safety_incidents") // JSON stored as string
  notes                String?
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Encryption metadata
  isEncrypted        Boolean? @default(false) @map("is_encrypted")
  encryptionPolicy   String?  @map("encryption_policy") // JSON stored as string
  encryptionMetadata String?  @map("encryption_metadata") // JSON - Encryption metadata for migration tracking

  // Relationships
  patient         Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  completedByUser User    @relation(fields: [completedBy], references: [id])

  @@map("symptom_entries")
}

// Weekly summaries table - Unchanged
model WeeklySummary {
  id                      String           @id @default(cuid())
  patientId               String           @map("patient_id")
  weekStartDate           DateTime         @map("week_start_date")
  weekEndDate             DateTime         @map("week_end_date")
  bestDay                 String?          @map("best_day")
  worstDay                String?          @map("worst_day")
  overallProgression      ProgressionType? @map("overall_progression")
  newSymptoms             String?          @map("new_symptoms")
  functionalChanges       String           @map("functional_changes") // JSON stored as string
  medicationEffectiveness String           @map("medication_effectiveness") // JSON stored as string
  caregiverConcerns       String           @map("caregiver_concerns") // JSON stored as string
  notes                   String?
  createdAt               DateTime         @default(now()) @map("created_at")
  updatedAt               DateTime         @updatedAt @map("updated_at")

  // Relationships
  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("weekly_summaries")
}

// Enhanced Enums
enum Role {
  super_admin
  clinic_admin
  professional_caregiver
  family_caregiver
  patient
}

enum CaregiverType {
  professional
  family
}

enum AssignmentStatus {
  pending
  active
  inactive
  declined
  revoked
}

enum InvitationStatus {
  pending
  accepted
  declined
  expired
}

enum EmergencyAccessType {
  medical_emergency
  technical_support
  data_recovery
  audit_investigation
}

enum ProgressionType {
  better
  same
  worse
}

// Encryption system models
model EncryptionKey {
  id             String    @id @default(cuid())
  userId         String?   @map("user_id")
  organizationId String    @map("organization_id")
  keyType        String    @map("key_type") // 'master', 'patient', 'delegation', 'emergency', 'organization', 'research'
  encryptedKey   String    @map("encrypted_key") // ABE-encrypted key material
  publicKey      String?   @map("public_key") // Public key component (for asymmetric schemes)
  attributes     String    @map("attributes") // JSON - Access control attributes
  derivationPath String?   @map("derivation_path") // Key derivation metadata
  expiresAt      DateTime? @map("expires_at")
  isActive       Boolean   @default(true) @map("is_active")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relationships
  user         User?        @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@map("encryption_keys")
}

// Proxy Re-Encryption keys for patient-controlled access delegation
model ProxyReEncryptionKey {
  id               String    @id @default(cuid())
  delegatorId      String    @map("delegator_id") // Patient who is delegating access
  delegateeId      String    @map("delegatee_id") // User receiving access
  dataCategories   String    @map("data_categories") // JSON - Data categories included in delegation
  accessLevel      String    @map("access_level") // Access level granted
  keyData          String    @map("key_data") // Encrypted re-encryption key
  reason           String    @map("reason") // Reason for delegation
  validFrom        DateTime  @default(now()) @map("valid_from")
  validUntil       DateTime  @map("valid_until")
  organizationId   String    @map("organization_id")
  isRevoked        Boolean   @default(false) @map("is_revoked")
  revokedAt        DateTime? @map("revoked_at")
  revokedBy        String?   @map("revoked_by")
  revocationReason String?   @map("revocation_reason")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relationships
  delegator    User         @relation("UserDelegations", fields: [delegatorId], references: [id])
  delegatee    User         @relation("UserDelegated", fields: [delegateeId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@map("proxy_re_encryption_keys")
}

// Homomorphic computation requests for privacy-preserving analytics
model HomomorphicComputation {
  id              String    @id @default(cuid())
  computationType String    @map("computation_type") // 'sum', 'mean', 'count', 'variance', 'correlation', 'regression'
  organizationId  String?   @map("organization_id")
  dataCategories  String    @map("data_categories") // JSON - Data categories to include
  cohortCriteria  String    @map("cohort_criteria") // JSON - Patient cohort criteria
  requesterId     String    @map("requester_id")
  purpose         String    @map("purpose")
  status          String    @default("pending") @map("status") // 'pending', 'running', 'completed', 'failed'
  encryptedResult String?   @map("encrypted_result") // Encrypted computation result
  errorMessage    String?   @map("error_message")
  computedAt      DateTime? @map("computed_at")
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relationships
  organization Organization? @relation(fields: [organizationId], references: [id])

  @@map("homomorphic_computations")
}

// Cryptographic audit trail for all encryption operations
model CryptoAuditEntry {
  id                 String   @id @default(cuid())
  operation          String   @map("operation") // 'encrypt', 'decrypt', 'key_generation', 'key_delegation', 'key_revocation', 'emergency_access'
  userId             String   @map("user_id")
  patientId          String?  @map("patient_id")
  organizationId     String   @map("organization_id")
  dataCategories     String   @map("data_categories") // JSON
  accessLevel        String   @map("access_level")
  encryptionContext  String   @map("encryption_context") // JSON - Encryption context details
  success            Boolean  @map("success")
  errorMessage       String?  @map("error_message")
  ipAddress          String   @map("ip_address")
  userAgent          String   @map("user_agent")
  cryptographicProof String   @map("cryptographic_proof") // Cryptographic signature of the audit entry
  emergencyDetails   String?  @map("emergency_details") // JSON - Emergency access specific details
  timestamp          DateTime @default(now()) @map("timestamp")

  @@map("crypto_audit_entries")
}

// Enums for encryption system
enum KeyType {
  master
  patient
  delegation
  emergency
  organization
  research
}

enum AccessLevel {
  patient_full
  caregiver_professional
  caregiver_family
  emergency_access
  research_anonymized
  analytics_aggregated
}

enum ComputationType {
  sum
  mean
  count
  variance
  correlation
  regression
}

// Data migration tracking for encryption system
model DataMigration {
  id               String    @id @default(cuid())
  status           String    @default("pending") // 'pending', 'running', 'completed', 'failed', 'cancelled'
  config           String // JSON - Migration configuration
  totalRecords     Int       @default(0) @map("total_records")
  processedRecords Int       @default(0) @map("processed_records")
  encryptedRecords Int       @default(0) @map("encrypted_records")
  failedRecords    Int       @default(0) @map("failed_records")
  errorMessage     String?   @map("error_message")
  startedAt        DateTime  @default(now()) @map("started_at")
  completedAt      DateTime? @map("completed_at")
  lastUpdated      DateTime  @updatedAt @map("last_updated")

  @@map("data_migrations")
}

// Performance audit tracking for encryption system
model PerformanceAudit {
  id               String   @id @default(cuid())
  auditId          String   @unique @map("audit_id")
  timestamp        DateTime @default(now())
  overallScore     Int      @map("overall_score") // 0-100
  metrics          String // JSON - Performance metrics
  recommendations  String // JSON - Performance recommendations
  securityFindings String   @map("security_findings") // JSON - Security audit findings
  createdAt        DateTime @default(now()) @map("created_at")

  @@map("performance_audits")
}

// Enhanced User Profile and Security Models

// Two-Factor Authentication
model TwoFactorAuth {
  id                String    @id @default(cuid())
  userId            String    @unique @map("user_id")
  secret            String // TOTP secret
  isEnabled         Boolean   @default(false) @map("is_enabled")
  backupCodes       String?   @map("backup_codes") // JSON array of backup codes
  recoveryCodesUsed String    @default("[]") @map("recovery_codes_used") // JSON array of used recovery codes
  qrCodeUrl         String?   @map("qr_code_url")
  setupCompletedAt  DateTime? @map("setup_completed_at")
  lastUsedAt        DateTime? @map("last_used_at")
  failedAttempts    Int       @default(0) @map("failed_attempts")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_auth")
}

// WebAuthn Passkeys
model Passkey {
  id               String    @id @default(cuid())
  userId           String    @map("user_id")
  credentialId     String    @unique @map("credential_id")
  publicKey        String    @map("public_key")
  deviceName       String    @map("device_name")
  deviceType       String?   @map("device_type") // 'mobile', 'desktop', 'hardware'
  counter          Int       @default(0) @map("counter")
  isBackupEligible Boolean   @default(false) @map("is_backup_eligible")
  isBackupDevice   Boolean   @default(false) @map("is_backup_device")
  transports       String?   @map("transports") // JSON array of transport methods
  createdAt        DateTime  @default(now()) @map("created_at")
  lastUsedAt       DateTime? @map("last_used_at")
  isActive         Boolean   @default(true) @map("is_active")

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("passkeys")
}

// Security Audit Logs
model SecurityAuditLog {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  organizationId    String?  @map("organization_id")
  action            String // 'login', 'logout', 'password_change', '2fa_enabled', '2fa_disabled', 'passkey_added', 'passkey_removed', 'failed_login', 'session_expired'
  resourceType      String?  @map("resource_type") // 'user', 'password', '2fa', 'passkey', 'session'
  resourceId        String?  @map("resource_id")
  ipAddress         String?  @map("ip_address")
  userAgent         String?  @map("user_agent")
  deviceFingerprint String?  @map("device_fingerprint")
  location          String?  @map("location") // Approximate location based on IP
  status            String // 'success', 'failed', 'suspicious'
  riskLevel         String   @default("low") @map("risk_level") // 'low', 'medium', 'high', 'critical'
  details           String   @default("{}") @map("details") // JSON stored as string with additional details
  sessionId         String?  @map("session_id")
  timestamp         DateTime @default(now()) @map("timestamp")

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("security_audit_logs")
}

// User Sessions
model UserSession {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  sessionToken      String   @unique @map("session_token")
  deviceFingerprint String?  @map("device_fingerprint")
  ipAddress         String?  @map("ip_address")
  userAgent         String?  @map("user_agent")
  location          String?  @map("location")
  isActive          Boolean  @default(true) @map("is_active")
  expiresAt         DateTime @map("expires_at")
  createdAt         DateTime @default(now()) @map("created_at")
  lastAccessedAt    DateTime @default(now()) @map("last_accessed_at")

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// Password History
model PasswordHistory {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  passwordHash String   @map("password_hash")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_history")
}

// Login Attempts
model LoginAttempt {
  id            String   @id @default(cuid())
  email         String   @map("email")
  ipAddress     String   @map("ip_address")
  userAgent     String?  @map("user_agent")
  success       Boolean  @map("success")
  failureReason String?  @map("failure_reason") // 'invalid_password', 'invalid_2fa', 'account_locked', 'invalid_email'
  attemptedAt   DateTime @default(now()) @map("attempted_at")

  @@map("login_attempts")
}

// User Preferences
model UserPreferences {
  id                        String   @id @default(cuid())
  userId                    String   @unique @map("user_id")
  theme                     String   @default("system") @map("theme") // 'light', 'dark', 'system'
  language                  String   @default("en") @map("language") // 'en', 'fr', etc.
  timezone                  String   @default("UTC") @map("timezone")
  dateFormat                String   @default("MM/DD/YYYY") @map("date_format")
  timeFormat                String   @default("12h") @map("time_format") // '12h', '24h'
  accessibilityHighContrast Boolean  @default(false) @map("accessibility_high_contrast")
  accessibilityLargeText    Boolean  @default(false) @map("accessibility_large_text")
  accessibilityScreenReader Boolean  @default(false) @map("accessibility_screen_reader")
  accessibilityKeyboardNav  Boolean  @default(false) @map("accessibility_keyboard_navigation")
  privacyAnalytics          Boolean  @default(true) @map("privacy_analytics")
  privacyMarketing          Boolean  @default(false) @map("privacy_marketing")
  privacyDataSharing        Boolean  @default(false) @map("privacy_data_sharing")
  createdAt                 DateTime @default(now()) @map("created_at")
  updatedAt                 DateTime @updatedAt @map("updated_at")

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

// Notification Settings
model NotificationSettings {
  id                       String   @id @default(cuid())
  userId                   String   @unique @map("user_id")
  emailSecurityAlerts      Boolean  @default(true) @map("email_security_alerts")
  emailLoginNotifications  Boolean  @default(true) @map("email_login_notifications")
  emailPasswordChanges     Boolean  @default(true) @map("email_password_changes")
  emailAccountChanges      Boolean  @default(true) @map("email_account_changes")
  emailWeeklySummary       Boolean  @default(true) @map("email_weekly_summary")
  emailSystemUpdates       Boolean  @default(false) @map("email_system_updates")
  smsSecurityAlerts        Boolean  @default(false) @map("sms_security_alerts")
  smsLoginNotifications    Boolean  @default(false) @map("sms_login_notifications")
  smsEmergencyAlerts       Boolean  @default(false) @map("sms_emergency_alerts")
  pushSecurityAlerts       Boolean  @default(true) @map("push_security_alerts")
  pushLoginNotifications   Boolean  @default(false) @map("push_login_notifications")
  pushSymptomReminders     Boolean  @default(true) @map("push_symptom_reminders")
  pushMedicationReminders  Boolean  @default(true) @map("push_medication_reminders")
  inAppSecurityAlerts      Boolean  @default(true) @map("in_app_security_alerts")
  inAppSystemNotifications Boolean  @default(true) @map("in_app_system_notifications")
  frequencyDailyDigest     Boolean  @default(false) @map("frequency_daily_digest")
  frequencyWeeklySummary   Boolean  @default(true) @map("frequency_weekly_summary")
  frequencyMonthlyReport   Boolean  @default(false) @map("frequency_monthly_report")
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @updatedAt @map("updated_at")

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_settings")
}
